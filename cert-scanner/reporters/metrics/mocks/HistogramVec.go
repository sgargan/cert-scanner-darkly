// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// HistogramVec is an autogenerated mock type for the HistogramVec type
type HistogramVec struct {
	mock.Mock
}

// DeleteLabelValues provides a mock function with given fields: lvs
func (_m *HistogramVec) DeleteLabelValues(lvs ...string) bool {
	_va := make([]interface{}, len(lvs))
	for _i := range lvs {
		_va[_i] = lvs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...string) bool); ok {
		r0 = rf(lvs...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WithLabelValues provides a mock function with given fields: lvs
func (_m *HistogramVec) WithLabelValues(lvs ...string) prometheus.Observer {
	_va := make([]interface{}, len(lvs))
	for _i := range lvs {
		_va[_i] = lvs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 prometheus.Observer
	if rf, ok := ret.Get(0).(func(...string) prometheus.Observer); ok {
		r0 = rf(lvs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Observer)
		}
	}

	return r0
}

// NewHistogramVec creates a new instance of HistogramVec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistogramVec(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistogramVec {
	mock := &HistogramVec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
