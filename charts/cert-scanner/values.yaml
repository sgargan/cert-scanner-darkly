# Default values to install cert-scanner
replicaCount: 1

# port used by the scanner to expose metrics, pprof and probe endpoints.
port: &port 9253

# Scan config yaml templated straight from here into a configMap
# mounted into the scanner container.
scanConfig:
  debug: true

  scan:
    repeated: true
    interval: 1m
    timeout: 1m

  discovery:
    kubernetes:
      source: some-cluster
      ignore:
        - coredns
    files:
      paths:
        - /etc/cert-scanner/hosts/hosts.yaml

  validations:
    expiry:
      warning_window: 72h
    tls_version:
      min_version: 1.2
    trust_chain:
      use_system_roots: true
      ca:
        paths:
        - /a/ca/path
        - /b/ca/path
        - /c/ca/path

  reporters:
    logging:
      enabled: true

  metrics:
    enabled: true
    port: *port

# Configure a list of static entries that will be loaded from a file and scanned.
# this is useful for scanning known fqdns. Helm will create a config map containing this
# an mount it to /etc/cert-scanner/hosts.yaml. Add this path to the discovery -> files
# section of the scan config to load and scan these.
hosts:
  groups:
    - source: important company fqdns
      hosts:
        - host: https://vanity.somecompany.com
        - host: https://www.somecompany.com
        - host: 10.2.3.4:8443
    - source:  other urls
      hosts:
        - host: https://google.com
        - host: https://github.com
        - host: https://golang.dev

# use the volumes and mounts to mount any CA bundles your systems use into the scanner
volumes: {}

volumeMounts: {}

image:
  url: docker.io/stevegargan/cert-scanner-darkly
  pullPolicy: IfNotPresent
  tag: 0.0.2

serviceAccount:
  annotations: {}

podSelectorLabels:
  prometheus.io/scrape: 'true'

# recommeded security context is to run as non-root with no
# extra capabiltities.
podSecurityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  port: *port

resources:
  requests:
    cpu: 100m
    memory: 100Mi

nodeSelector: {}

tolerations: []

affinity: {}
